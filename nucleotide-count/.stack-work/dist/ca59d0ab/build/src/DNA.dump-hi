
==================== FINAL INTERFACE ====================
2017-05-29 19:06:06.1598036 UTC

interface nucleotide-count-1.0.0.3-1meloKazsgKAGU5BFCvnwr:DNA 8002
  interface hash: 21b69fa4432af810f745b75fa4788efe
  ABI hash: 38c2938d58b49a692caa4edd1f447a41
  export-list hash: a39aa2cdfb46647cce9dd67ff7737fcc
  orphan hash: 77a7a30a3398de9582db08e351c72850
  flag hash: 6afe13224aedeef930039c5dc659fa04
  sig of: Nothing
  used TH splices: False
  where
exports:
  DNA.nucleotideCounts
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Data.Either 186ef9adf6b47e24f39efe9b2e18e352
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 6c2364c30285a1caa610caab304974c4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base dfcca0a6b3fe956067f7db6df4d400c2
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
08e43ca090c26dabdd85210f4ebfe459
  $sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Char, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> DNA.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> DNA.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
f812f8948fa61caa90000a006d3df40e
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
cc4259b8daa9b51f9a2411048a3929bf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module DNA.$trModule2 DNA.$trModule1) -}
b70b69632b20c858eef914fc60d5f47e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DNA"#) -}
a7faa8980acd5c31ee6ce28a14ee33d7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "nucleotide-count-1.0.0.3-1meloKazsgKAGU5BFCvnwr"#) -}
f8f08f5965d83ce3358c278aa3ab0dbd
  $w$sgo10 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
8ea123682ba1fc0e257458868f589ad7
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
149b2f7d832f9497dd2ea5d25230c829
  $wpoly_go10 ::
    GHC.Prim.Char# -> Data.Map.Base.Map GHC.Types.Char a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
561745c61a0d82ef989afa46b907816b
  nucleotideCounts ::
    GHC.Base.String
    -> Data.Either.Either
         GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case (DNA.nucleotideCounts_go1 x)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> DNA.nucleotideCounts15
                   GHC.Types.True
                   -> case GHC.Base.eqString
                             x
                             (GHC.Types.[] @ GHC.Types.Char) of wild1 {
                        GHC.Types.False
                        -> Data.Either.Right
                             @ GHC.Base.String
                             @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                             (DNA.nucleotideCounts_go x DNA.nucleotideCounts_empty)
                        GHC.Types.True -> DNA.nucleotideCounts1 } }) -}
1edb427b32b6f7d34c5baf4d782e5c72
  nucleotideCounts1 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   DNA.nucleotideCounts_empty) -}
1741e8a7590a675ca8c49fc1becb2900
  nucleotideCounts10 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'G'#) -}
567966bf02090a6c40efcd7497fd2c87
  nucleotideCounts11 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((DNA.nucleotideCounts12, DNA.nucleotideCounts7)) -}
41f51b4f9d37b8cc4dd9c3e98fb3f6e7
  nucleotideCounts12 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'C'#) -}
7aab2e1466e071e904af40775feb3441
  nucleotideCounts13 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((DNA.nucleotideCounts14, DNA.nucleotideCounts7)) -}
c9f75c32745e23a8d893c4badcd114c0
  nucleotideCounts14 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'A'#) -}
f6c401e18b5944f3ed8276f900cf0553
  nucleotideCounts15 ::
    Data.Either.Either
      [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ [GHC.Types.Char]
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   DNA.nucleotideCounts16) -}
fd1371315937ad44cbd47e2297535a9e
  nucleotideCounts16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Incorrect nucleotide"#) -}
b7345af9eb18170f61cb2d1590ab7f07
  nucleotideCounts2 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   DNA.nucleotideCounts13
                   DNA.nucleotideCounts3) -}
4805e67886e65017b4966e36e2f9ed3a
  nucleotideCounts3 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   DNA.nucleotideCounts11
                   DNA.nucleotideCounts4) -}
f92c2113841907e0e106ae695e99a6e2
  nucleotideCounts4 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   DNA.nucleotideCounts9
                   DNA.nucleotideCounts5) -}
1bd78da199f6be6b1da9b070e64b2daa
  nucleotideCounts5 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   DNA.nucleotideCounts6
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
8d2d56d4f9d89f45021c5d78b053e46b
  nucleotideCounts6 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((DNA.nucleotideCounts8, DNA.nucleotideCounts7)) -}
e3a398121129ff06ea8ebf17da8987be
  nucleotideCounts7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
0c516ef74ea4da786df4e9329e01cd7a
  nucleotideCounts8 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'T'#) -}
8ad30b50155586eec93fc0c9f5c727af
  nucleotideCounts9 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((DNA.nucleotideCounts10, DNA.nucleotideCounts7)) -}
9cd0b6cbb8a1cc6326ee0282ae6b77ea
  nucleotideCounts_empty ::
    Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
  {- Unfolding: (DNA.$sfromList
                   @ GHC.Types.Int
                   DNA.nucleotideCounts2) -}
05d4382304b73366a948ee18d7b0d82f
  nucleotideCounts_go ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
7f9445f35df72eeb8f1068cd38317170
  nucleotideCounts_go1 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
"SPEC/DNA fromList @ Char _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord GHC.Types.Char)
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = DNA.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

