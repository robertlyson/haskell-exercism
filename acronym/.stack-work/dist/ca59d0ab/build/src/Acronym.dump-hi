
==================== FINAL INTERFACE ====================
2017-05-28 08:28:45.4578235 UTC

interface acronym-1.0.0.1-7o9nNZydhmoHPNbGLqPTeM:Acronym 8002
  interface hash: 259098c69c4e2d6e8ac8c1addb7b3f01
  ABI hash: 28041bd6515142437d0690e523eed3e9
  export-list hash: 6513c74cec8b5d40cb9474c2e42ad28b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6afe13224aedeef930039c5dc659fa04
  sig of: Nothing
  used TH splices: False
  where
exports:
  Acronym.abbreviate
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char c49b58282af11503cc838e1052cf6b83
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Unicode 7b64ed854a326c2c5bb224f237ed4a0b
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
33252d3ddd93c357f23586a728c8e55d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Acronym.$trModule2
                   Acronym.$trModule1) -}
01ca506824a388ba21f103400c6ce0a6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Acronym"#) -}
2a81919c55a14c0209967b02966c98f3
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "acronym-1.0.0.1-7o9nNZydhmoHPNbGLqPTeM"#) -}
bbdcd47b038adf7eedd28bfa388bea41
  $wlvl :: GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 let {
                   x :: GHC.Prim.Word# = GHC.Prim.int2Word# (GHC.Prim.ord# ww)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord# x 887##) of wild {
                   GHC.Types.False
                   -> case {__pkg_ccall base-4.9.1.0 u_iswspace GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                             (GHC.Prim.ord# ww)
                             GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.True
                        0#
                        -> case ww of wild4 {
                             DEFAULT -> GHC.Types.False '-'# -> GHC.Types.True } } }
                   GHC.Types.True
                   -> case x of wild1 {
                        DEFAULT
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord# (GHC.Prim.minusWord# wild1 9##) 4##) of wild2 {
                             GHC.Types.False
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> case ww of wild4 {
                                       DEFAULT -> GHC.Types.False '-'# -> GHC.Types.True }
                                  160## -> GHC.Types.True }
                             GHC.Types.True -> GHC.Types.True }
                        32## -> GHC.Types.True } }) -}
2ca3b6876c3d2ee384ef51f2adb6dca4
  abbreviate :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ipv ipv1
                   -> case GHC.Base.map
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             Acronym.abbreviate2
                             (Acronym.words' Acronym.abbreviate1 wild) of wild1 {
                        [] -> GHC.List.foldl2 @ [GHC.Types.Char]
                        : x xs -> Acronym.abbreviate_go xs x } }) -}
a36335ab4223a8dd80ae1666f7edd9ff
  abbreviate1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Acronym.$wlvl ww1 }) -}
b2fe72aa9188b4e727a88d6cf7aaa9fe
  abbreviate2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (text :: [GHC.Types.Char]) ->
                 case text of wild {
                   [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                   : x ds1
                   -> case x of wild1 { GHC.Types.C# c# ->
                      case {__pkg_ccall base-4.9.1.0 u_iswlower GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                             (GHC.Prim.ord# c#)
                             GHC.Prim.realWorld# of wild2 { (#,#) ds ds2 ->
                      case ds2 of wild3 {
                        DEFAULT
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             (case {__pkg_ccall base-4.9.1.0 u_towupper GHC.Prim.Int#
                                                                        -> GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Int# #)}
                                     (GHC.Prim.ord# c#)
                                     GHC.Prim.realWorld# of wild4 { (#,#) ds3 ds4 ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.leWord#
                                        (GHC.Prim.int2Word# ds4)
                                        1114111##) of wild5 {
                                GHC.Types.False -> GHC.Char.chr2 ds4
                                GHC.Types.True -> GHC.Types.C# (GHC.Prim.chr# ds4) } })
                             (GHC.Types.[] @ GHC.Types.Char)
                        0#
                        -> case (Acronym.abbreviate_go1 wild)
                                  `cast`
                                (Data.Monoid.N:All[0]) of wild4 {
                             GHC.Types.False
                             -> GHC.List.filter @ GHC.Types.Char GHC.Unicode.isUpper wild
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  wild1
                                  (GHC.Types.[] @ GHC.Types.Char) } } } } }) -}
6901e360d9ceb5382545dd4b4da711ea
  abbreviate_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
452ef492e936f46c0ee1273676a44840
  abbreviate_go1 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, Strictness: <S,1*U> -}
1183bec61ecef0cc4125d8cf47b95bc6
  words' ::
    (GHC.Types.Char -> GHC.Types.Bool)
    -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

